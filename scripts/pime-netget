#!/bin/bash
# pime-netget v3.0 - Ultimate Connection Reliability

VERSION="3.0"
USER_AGENT="pime-netget/$VERSION"
DEFAULT_TIMEOUT=10  # Reduced timeout for faster failure
MAX_RETRIES=3

# Color codes for error messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

show_help() {
    cat <<EOF
pime-netget v$VERSION - Ultra-reliable HTTPS client

Usage:$
  pime-netget [options] <url>
  
Options:$
  -o FILE      Write output to FILE
  -L           Follow redirects
  -v           Verbose mode (shows full diagnostics)
  -k           Skip SSL verification
  --debug      Super verbose mode for troubleshooting
  --help       Show this help

${YELLOW}Troubleshooting Tips:${NC}
1. Try with -k to bypass SSL checks
2. Use -v or --debug for detailed error info
3. Check your internet connection
4. Verify the server is reachable:
   ping ${GREEN}jamisonsmith.is-a.dev${NC}
EOF
}

debug_connection() {
    local host="$1"
    local port="$2"
    
    echo -e "${YELLOW}🚀 Running deep connection diagnostics...${NC}" >&2
    
    # 1. Check basic ping
    echo -e "${YELLOW}🛜 Testing ICMP connectivity...${NC}" >&2
    if ping -c 2 -W 1 "$host" &>/dev/null; then
        echo -e "${GREEN}✓ Host responds to ping${NC}" >&2
    else
        echo -e "${RED}✗ Host does not respond to ping${NC}" >&2
    fi
    
    # 2. Check DNS resolution
    echo -e "${YELLOW}🔍 Testing DNS resolution...${NC}" >&2
    local dns_result
    if dns_result=$(host -W 1 "$host" 2>&1); then
        echo -e "${GREEN}✓ DNS resolved successfully:${NC}" >&2
        echo "$dns_result" | sed 's/^/  /' >&2
    else
        echo -e "${RED}✗ DNS resolution failed${NC}" >&2
        echo "Try these commands to debug:" >&2
        echo "  host $host" >&2
        echo "  dig $host" >&2
        return 1
    fi
    
    # 3. Test TCP connection
    echo -e "${YELLOW}🔌 Testing TCP port $port...${NC}" >&2
    if timeout 2 bash -c "cat < /dev/null > /dev/tcp/$host/$port" 2>/dev/null; then
        echo -e "${GREEN}✓ TCP connection successful${NC}" >&2
    else
        echo -e "${RED}✗ Cannot establish TCP connection${NC}" >&2
        echo "Try these commands:" >&2
        echo "  telnet $host $port" >&2
        echo "  nc -zv $host $port" >&2
        return 1
    fi
    
    # 4. Test SSL handshake
    echo -e "${YELLOW}🔐 Testing SSL handshake...${NC}" >&2
    local ssl_test
    if ssl_test=$(echo | openssl s_client -connect "$host:$port" -servername "$host" 2>&1); then
        echo -e "${GREEN}✓ SSL handshake successful${NC}" >&2
        echo -e "${YELLOW}Certificate details:${NC}" >&2
        echo "$ssl_test" | openssl x509 -noout -text | grep -A1 "Validity\|Subject:" | sed 's/^/  /' >&2
    else
        echo -e "${RED}✗ SSL handshake failed${NC}" >&2
        echo "Error details:" >&2
        echo "$ssl_test" | grep -i "error\|fail\|certificate" | head -5 | sed 's/^/  /' >&2
        echo -e "\nTry with ${YELLOW}-k${NC} to skip verification" >&2
        return 1
    fi
    
    return 0
}

netget() {
    local url="$1"
    local output_file="$2"
    local follow_redirects=0
    local verbose=0
    local insecure=0
    local debug=0
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -o) output_file="$2"; shift 2 ;;
            -L) follow_redirects=1; shift ;;
            -v) verbose=1; shift ;;
            -k) insecure=1; shift ;;
            --debug) debug=1; verbose=1; shift ;;
            --help) show_help; return 0 ;;
            *) url="$1"; shift ;;
        esac
    done

    [ -z "$url" ] && { show_help; return 1; }

    # Validate URL format
    if [[ ! "$url" =~ ^https:// ]]; then
        echo -e "${RED}Error: URL must start with https://${NC}" >&2
        return 1
    fi

    # Extract URL components
    local host_port="${url#https://}"
    host_port="${host_port%%[/?]*}"
    local path="/${url#https://$host_port/}"
    
    local host="${host_port%:*}"
    local port="${host_port##*:}"
    [ "$port" = "$host_port" ] && port=443

    # Run debug diagnostics if requested
    if [ $debug -eq 1 ]; then
        debug_connection "$host" "$port" || return 1
    fi

    # Prepare SSL options
    local ssl_opts="-quiet"
    [ $insecure -eq 1 ] && ssl_opts+=" -verify_quiet -verify_return_error"

    # Retry loop
    local attempt=0
    local success=0
    
    while [ $attempt -lt $MAX_RETRIES ] && [ $success -eq 0 ]; do
        attempt=$((attempt + 1))
        [ $attempt -gt 1 ] && sleep 1  # Brief delay between retries
        
        # Create temporary files
        local tmp_dir=$(mktemp -d)
        local response_file="$tmp_dir/response"
        local error_file="$tmp_dir/error"
        
        if [ $verbose -eq 1 ]; then
            echo -e "${YELLOW}Attempt $attempt/$MAX_RETRIES: Connecting to $host:$port...${NC}" >&2
        fi

        # Make the request
        {
            printf "GET %s HTTP/1.1\r\n" "$path"
            printf "Host: %s\r\n" "$host"
            printf "User-Agent: %s\r\n" "$USER_AGENT"
            printf "Connection: close\r\n"
            printf "\r\n"
        } | openssl s_client -connect "$host:$port" -servername "$host" \
          $ssl_opts -timeout $DEFAULT_TIMEOUT > "$response_file" 2>"$error_file"
        
        # Check for success
        if [ $? -eq 0 ] && [ -s "$response_file" ]; then
            success=1
        else
            [ $verbose -eq 1 ] && \
                echo -e "${RED}Attempt $attempt failed:${NC} $(grep -o "connect:.*\|SSL3_.*" "$error_file" | head -1)" >&2
        fi
        
        # Cleanup temp files if we're retrying
        [ $success -eq 0 ] && rm -rf "$tmp_dir"
    done

    if [ $success -eq 0 ]; then
        echo -e "${RED}Connection failed after $MAX_RETRIES attempts${NC}" >&2
        echo -e "${YELLOW}Last error:${NC}" >&2
        cat "$error_file" | grep -i "error\|fail\|certificate" | sed 's/^/  /' >&2
        echo -e "\n${YELLOW}Troubleshooting tips:${NC}" >&2
        echo "1. Try with ${YELLOW}-k${NC} to skip SSL verification" >&2
        echo "2. Use ${YELLOW}--debug${NC} for detailed diagnostics" >&2
        echo "3. Check if the site works in your browser" >&2
        echo "4. Test with: ${YELLOW}curl -v $url${NC}" >&2
        return 1
    fi

    # Process response
    local header_end=$(grep -an $'^\r$' "$response_file" | head -1 | cut -d: -f1)
    if [ -z "$header_end" ]; then
        echo -e "${RED}Error: Invalid HTTP response format${NC}" >&2
        [ $verbose -eq 1 ] && head -c 200 "$response_file" >&2
        return 1
    fi

    # Output results
    if [ -n "$output_file" ]; then
        tail -n +$((header_end + 1)) "$response_file" > "$output_file"
        [ $verbose -eq 1 ] && \
            echo -e "${GREEN}Successfully saved to $output_file${NC}" >&2
    else
        tail -n +$((header_end + 1)) "$response_file"
    fi

    return 0
}

# Main execution
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # Check for basic dependencies
    if ! command -v openssl &>/dev/null; then
        echo -e "${RED}Error: openssl is required but not installed${NC}" >&2
        exit 1
    fi
    
    netget "$@"
    exit $?
fi