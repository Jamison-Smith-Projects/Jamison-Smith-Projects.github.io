#!/bin/sh

PACKAGE_LIST_URL="https://jamisonsmith.is-a.dev/scripts/pimerepo/packages.json"
LOCAL_PACKAGE_LIST="$HOME/.pime/packages.json"
REPO_LIST="$HOME/.pime/repo-list.json"
ALL_PACKAGES="$HOME/.pime/packages.json"

INSTALLED_LIST="$HOME/.pime/installed.txt"

mark_installed() {
    pkg="$1"
    grep -qxF "$pkg" "$INSTALLED_LIST" 2>/dev/null || echo "$pkg" >> "$INSTALLED_LIST"
}

mark_uninstalled() {
    pkg="$1"
    if [ -f "$INSTALLED_LIST" ]; then
        grep -vxF "$pkg" "$INSTALLED_LIST" > "$INSTALLED_LIST.tmp" && mv "$INSTALLED_LIST.tmp" "$INSTALLED_LIST"
    fi
}

list_installed() {
    if [ ! -f "$INSTALLED_LIST" ] || [ ! -s "$INSTALLED_LIST" ]; then
        echo "No packages installed."
    else
        echo "Installed packages:"
        cat "$INSTALLED_LIST"
    fi
}
version=$(cat $HOME/.pimeversion)
show_help() {
    cat <<EOF
Version: $version
Usage: pime install/uninstall PACKAGE or pime update

Arguments:
    install PACKAGE
    uninstall PACKAGE
    update
    add-repo REPO-URL

Options:
  --help            Show this help message and exit.
  -u                Updates this program.
EOF
}

update_packages() {
    echo "Updating package list..."
    mkdir -p "$(dirname "$ALL_PACKAGES")"
    > "$ALL_PACKAGES"

    if [ ! -f "$REPO_LIST" ]; then
        echo "No repositories found. Use 'pime add-repo <URL>' to add one."
        return
    fi

    tmp_dir=$(mktemp -d)

    for repo_url in $(jq -r '.[]' "$REPO_LIST"); do
        echo "Fetching: $repo_url"
        tmp_file="$tmp_dir/repo.json"
        if curl -fsSL "$repo_url" -o "$tmp_file"; then
            jq -s 'add' "$ALL_PACKAGES" "$tmp_file" > "$ALL_PACKAGES.tmp" && mv "$ALL_PACKAGES.tmp" "$ALL_PACKAGES"
        else
            echo "Warning: Failed to fetch $repo_url"
        fi
    done

    rm -rf "$tmp_dir"
    echo "Package list updated from all repositories."
}


install_package() {
    pkg="$1"
    if [ ! -f "$ALL_PACKAGES" ]; then
        echo "Package list not found. Run 'pime update' first." >&2
        exit 1
    fi

    url=$(jq -r --arg pkg "$pkg" 'try .[$pkg].INSTALLERURL // empty' "$ALL_PACKAGES")
    author=$(jq -r --arg pkg "$pkg" 'try .[$pkg].PackageAuthor // "Unknown"' "$ALL_PACKAGES")

    if [ -z "$url" ]; then
        echo "Package '$pkg' not found in available repositories." >&2
        exit 1
    fi

    echo "Installing $pkg from $url (by $author)"
    tmpfile=$(mktemp)
    if curl -fsSL "$url" -o "$tmpfile"; then
        chmod +x "$tmpfile"
        sh "$tmpfile"
        rm "$tmpfile"
        mark_installed "$pkg"
        echo "$pkg installed successfully."
    else
        echo "Failed to download installer." >&2
        exit 1
    fi
}


uninstall_package() {
    pkg="$1"
    echo "Attempting to uninstall package: $pkg"

    # Define common binary paths to check
    BIN_PATHS="/usr/bin /usr/local/bin /usr/sbin /usr/local/sbin"

    FOUND=0
    for path in $BIN_PATHS; do
        if [ -f "$path/$pkg" ]; then
            echo "Found $pkg in $path, removing..."
            sudo rm -f "$path/$pkg"
            FOUND=1
        fi
    done

    # Also check user's local bin if relevant
    if [ -f "$HOME/.local/bin/$pkg" ]; then
        echo "Found $pkg in ~/.local/bin, removing..."
        rm -f "$HOME/.local/bin/$pkg"
        FOUND=1
    fi

    # Remove version file
    VERSION_FILE="$HOME/.pime/.${pkg}version"
    if [ -f "$VERSION_FILE" ]; then
        echo "Removing version file: $VERSION_FILE"
        rm -f "$VERSION_FILE"
    fi
    mark_uninstalled "$pkg"
    if [ "$FOUND" -eq 0 ]; then
        echo "Warning: No binary for '$pkg' found in standard locations."
    else
        echo "Package '$pkg' uninstalled successfully."
    fi
}

add_repo() {
    repo_url="$1"
    mkdir -p "$(dirname "$REPO_LIST")"

    if [ ! -f "$REPO_LIST" ]; then
        echo "[]" > "$REPO_LIST"
    fi

    if grep -q "$repo_url" "$REPO_LIST"; then
        echo "Repo already added."
    else
        tmp=$(mktemp)
        jq ". + [\"$repo_url\"]" "$REPO_LIST" > "$tmp" && mv "$tmp" "$REPO_LIST"
        echo "Repo added: $repo_url"
    fi
}

update_bootstrapper() {
    cd $HOME/
    mkdir .pimebin
    cd .pimebin
    curl -lso pime-updater https://jamisonsmith.is-a.dev/scripts/updaters/pime-updater
    chmod +x pime-updater
    ./pime-updater
    rm -rf ./pime-updater
    cd ..
    rm -rf .pimebin
    exit 0
}
# Main handler
case "$1" in
    --help)
        show_help
        ;;
    add-repo)
        if [ -z "$2" ]; then
            echo "Error: Missing URL for add-repo." >&2
            exit 1
        fi
        add_repo "$2"
        ;;

    list)
        list_installed
        ;;
    update)
        update_packages
        ;;
    install)
        if [ -z "$2" ]; then
            echo "Error: Missing package name for install." >&2
            exit 1
        fi
        install_package "$2"
        ;;
    uninstall)
        if [ -z "$2" ]; then
            echo "Error: Missing package name for uninstall." >&2
            exit 1
        fi
        uninstall_package "$2"
        ;;
    -u)
        update_bootstrapper
        ;;
    *)
        echo "Error: Unknown command '$1'" >&2
        show_help
        exit 1
        ;;
esac
