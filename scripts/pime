#!/bin/sh

# --- Configuration ---
REPO_LIST_FILE="$HOME/.pime/repo-list.json"
ALL_PACKAGES="$HOME/.pime/packages.json"
INSTALLED_LIST="$HOME/.pime/installed.txt"
VERSION_FILE="$HOME/.pimeversion"

# --- Ensure directories exist ---
mkdir -p "$HOME/.pime"

netget() {
    local url="$1"
    local output_file="$2"
    local follow_redirects=0
    local verbose=0
    local insecure=0
    local test_only=0
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -o) output_file="$2"; shift 2 ;;
            -L) follow_redirects=1; shift ;;
            -v) verbose=1; shift ;;
            -k) insecure=1; shift ;;
            --test) test_only=1; shift ;;
            --help) show_help; return 0 ;;
            *) url="$1"; shift ;;
        esac
    done

    [ -z "$url" ] && { show_help; return 1; }

    # Parse URL
    if [[ ! "$url" =~ ^https:// ]]; then
        echo "Error: Only HTTPS URLs are supported (must start with https://)" >&2
        return 1
    fi

    local host_port="${url#https://}"
    host_port="${host_port%%[/?]*}"
    local path="/${url#https://$host_port/}"
    
    local host="${host_port%:*}"
    local port="${host_port##*:}"
    [ "$port" = "$host_port" ] && port=443

    # Run diagnostics
    if [ $verbose -eq 1 ] || [ $test_only -eq 1 ]; then
        if ! diagnose_connection "$host" "$port"; then
            return 1
        fi
        [ $test_only -eq 1 ] && return 0
    fi

    # Prepare SSL options
    local ssl_opts="-quiet"
    [ $insecure -eq 1 ] && ssl_opts+=" -verify_quiet -verify_return_error"

    # Create temporary files
    local tmp_dir=$(mktemp -d)
    local response_file="$tmp_dir/response"
    local error_file="$tmp_dir/error"
    trap 'rm -rf "$tmp_dir"' EXIT

    # Make the request
    {
        printf "GET %s HTTP/1.1\r\n" "$path"
        printf "Host: %s\r\n" "$host"
        printf "User-Agent: %s\r\n" "$USER_AGENT"
        printf "Connection: close\r\n"
        printf "\r\n"
    } | openssl s_client -connect "$host:$port" -servername "$host" \
      $ssl_opts -timeout $DEFAULT_TIMEOUT > "$response_file" 2>"$error_file"

    # Check for connection errors
    if [ $? -ne 0 ]; then
        echo "Connection Failed: $host:$port" >&2
        echo "Possible reasons:" >&2
        grep -o "connect:.*\|SSL3_.*\|certificate.*" "$error_file" | sort -u >&2
        return 1
    fi

    # Check if response is empty
    if [ ! -s "$response_file" ]; then
        echo "Error: Server returned empty response" >&2
        return 1
    fi

    # Process response
    local header_end=$(grep -an $'^\r$' "$response_file" | head -1 | cut -d: -f1)
    if [ -z "$header_end" ]; then
        echo "Error: Invalid HTTP response format" >&2
        [ $verbose -eq 1 ] && head -c 200 "$response_file" >&2
        return 1
    fi

    # Output results
    if [ -n "$output_file" ]; then
        tail -n +$((header_end + 1)) "$response_file" > "$output_file"
    else
        tail -n +$((header_end + 1)) "$response_file"
    fi

    return 0
}

# --- Rest of the script remains the same ---
show_help() {
    cat <<EOF
Pime - Lightweight Package Manager (v$(cat "$VERSION_FILE" 2>/dev/null || echo "unknown"))

Usage: pime install PACKAGE
       pime uninstall PACKAGE
       pime update
       pime list
       pime add-repo URL
       pime --help
       pime -u

Options:
  --help            Show this help message and exit.
  -u                Updates this program.
EOF
}

mark_installed() {
    pkg="$1"
    grep -qxF "$pkg" "$INSTALLED_LIST" 2>/dev/null || echo "$pkg" >> "$INSTALLED_LIST"
}

mark_uninstalled() {
    pkg="$1"
    if [ -f "$INSTALLED_LIST" ]; then
        grep -vxF "$pkg" "$INSTALLED_LIST" > "$INSTALLED_LIST.tmp" && mv "$INSTALLED_LIST.tmp" "$INSTALLED_LIST"
    fi
}

list_installed() {
    if [ ! -f "$INSTALLED_LIST" ] || [ ! -s "$INSTALLED_LIST" ]; then
        echo "No packages installed."
    else
        echo "Installed packages:"
        cat "$INSTALLED_LIST"
    fi
}

update_packages() {
    echo "Updating package list..."
    echo '{}' > "$ALL_PACKAGES"
    [ -f "$REPO_LIST_FILE" ] || echo '[]' > "$REPO_LIST_FILE"

    for repo in $(jq -r '.[]' "$REPO_LIST_FILE"); do
        echo "Fetching: $repo"
        data=$(netget "$repo")
        if [ -n "$data" ]; then
            echo "$data" | jq -s '.[0] * .[1]' "$ALL_PACKAGES" - > "$ALL_PACKAGES.tmp" && mv "$ALL_PACKAGES.tmp" "$ALL_PACKAGES"
        else
            echo "Warning: Could not fetch $repo" >&2
        fi
    done
    echo "Package list updated."
}

install_package() {
    pkg="$1"
    if [ ! -f "$ALL_PACKAGES" ]; then
        echo "Package list not found. Run 'pime update' first." >&2
        exit 1
    fi

    pkg_data=$(jq -r --arg pkg "$pkg" '.[$pkg]' "$ALL_PACKAGES")
    if [ "$pkg_data" = "null" ]; then
        echo "Package '$pkg' not found." >&2
        exit 1
    fi

    url=$(echo "$pkg_data" | jq -r '.INSTALLERURL')
    author=$(echo "$pkg_data" | jq -r '.PackageAuthor // "Unknown"')
    dependencies=$(echo "$pkg_data" | jq -r '.Dependencies[]?')
    binary_name=$(echo "$pkg_data" | jq -r '.InstalledBinary')

    [ "$binary_name" = "null" ] || [ -z "$binary_name" ] && binary_name="$pkg"

    for dep in $dependencies; do
        echo "Installing dependency: $dep"
        install_package "$dep"
    done

    echo "Installing $pkg from $url (by $author)"
    tmpfile=$(mktemp)
    netget "$url" > "$tmpfile" || { echo "Failed to download installer."; rm -f "$tmpfile"; exit 1; }
    chmod +x "$tmpfile"
    sh "$tmpfile"
    rm "$tmpfile"
    mark_installed "$pkg"
    echo "$pkg installed."
}

uninstall_package() {
    pkg="$1"
    echo "Attempting to uninstall package: $pkg"

    BIN_PATHS="/usr/bin /usr/local/bin /usr/sbin /usr/local/sbin"
    FOUND=0
    for path in $BIN_PATHS; do
        if [ -f "$path/$pkg" ]; then
            echo "Found $pkg in $path, removing..."
            sudo rm -f "$path/$pkg"
            FOUND=1
        fi
    done

    if [ -f "$HOME/.local/bin/$pkg" ]; then
        echo "Found $pkg in ~/.local/bin, removing..."
        rm -f "$HOME/.local/bin/$pkg"
        FOUND=1
    fi

    VERSION_FILE="$HOME/.pime/.${pkg}version"
    if [ -f "$VERSION_FILE" ]; then
        echo "Removing version file: $VERSION_FILE"
        rm -f "$VERSION_FILE"
    fi
    mark_uninstalled "$pkg"
    if [ "$FOUND" -eq 0 ]; then
        echo "Warning: No binary for '$pkg' found in standard locations."
    else
        echo "Package '$pkg' uninstalled successfully."
    fi
}

add_repo() {
    url="$1"
    [ -f "$REPO_LIST_FILE" ] || echo '[]' > "$REPO_LIST_FILE"
    if jq -e --arg url "$url" '.[] | select(. == $url)' "$REPO_LIST_FILE" >/dev/null; then
        echo "Repository already added."
    else
        jq --arg url "$url" '. + [$url]' "$REPO_LIST_FILE" > "$REPO_LIST_FILE.tmp" && mv "$REPO_LIST_FILE.tmp" "$REPO_LIST_FILE"
        echo "Repository added."
    fi
}

update_bootstrapper() {
    tmpdir=$(mktemp -d)
    cd "$tmpdir" || exit
    netget "https://jamisonsmith.is-a.dev/scripts/pime-updater" > pime-updater
    chmod +x pime-updater
    ./pime-updater
    cd ..
    rm -rf "$tmpdir"
    exit 0
}

# --- Main ---
case "$1" in
    --help)
        show_help
        ;;
    list)
        list_installed
        ;;
    update)
        update_packages
        ;;
    install)
        if [ -z "$2" ]; then
            echo "Error: Missing package name for install." >&2
            exit 1
        fi
        install_package "$2"
        ;;
    uninstall)
        if [ -z "$2" ]; then
            echo "Error: Missing package name for uninstall." >&2
            exit 1
        fi
        uninstall_package "$2"
        ;;
    add-repo)
        if [ -z "$2" ]; then
            echo "Error: Missing URL for add-repo." >&2
            exit 1
        fi
        add_repo "$2"
        ;;
    -u)
        update_bootstrapper
        ;;
    *)
        echo "Error: Unknown command '$1'" >&2
        show_help
        exit 1
        ;;
esac